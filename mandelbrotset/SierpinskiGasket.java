/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mandelbrotset;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author trinch
 */
public class SierpinskiGasket extends javax.swing.JPanel {

    /**
     * Creates new form SierpinskiGasket
     */
    public SierpinskiGasket() {
        initComponents();
    }

   
    @Override
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g); // Do the original draw
        
        int height = this.getHeight()*2 - this.getHeight()/4;
        // aspect ratio
        int width = height;
        int blankSpace = 0;
        //System.out.println("Height: "+height+", width: "+width+", blank space: "+blankSpace);

        
        /* 
            Pseudo code:
            (x, y)= a random point in the bi-unit square
            iterate { 
                i = a random integer from 0 to n âˆ’ 1 inclusive
                (x, y) = Fi(x, y)
                plot(x, y) except during the first 20 iterations
            }
        */
        
        int i=0, numIterations=500000;
        // map x and y to [-1, 1]
        double x = -1 + (Math.random() * 2);
        double y = -1 + (Math.random() * 2);

        while (i < numIterations) {
            // choosing which function to use
            int fun = (int)(Math.random() * (3));
            // recalculate x and y coordinates
            x = x(x, fun);
            y = y(y, fun);
            //System.out.println(x);
            //System.out.println(y);
            
            if (i > 19)
                plot (x, y, height, width, blankSpace, g);
            
            i++;
            
            //.out.println("Going through "+i+"th iteration...");
        }
        
    } 
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private double x(double x, int fun) {
        switch(fun) {
            case 0:
                return x/2.0;
            case 1:
                return (x+1)/2.0;
            case 2:
                return x/2.0;
        }
        
        return -2;
    }

    private double y(double y, int fun) {
        switch(fun) {
            case 0:
                return y/2.0;
            case 1:
                return y/2.0;
            case 2:
                return (y+1)/2.0;
        }
        
        return -2;
    }

    private void plot(double x, double y, int height, int width, int blankSpace, Graphics g) {
        //System.out.println(x);
        //System.out.println(y);
        // get a number from 0 to 2
        x = x+1;
        y = y+1;
        // multiply to get pixels, add or subtract to center it
        x = x*(height/2) - height/8;
        y = width - 1 - y*(width/2) + height/20;
        
        //System.out.println("Drawing x,y: "+(int)(x+blankSpace)+ ","+ (int)y);
        g.setColor(Color.BLACK);
        g.drawOval((int)(x+blankSpace), (int)(y+blankSpace), 1, 1);
    }
}
