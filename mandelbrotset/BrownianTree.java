/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mandelbrotset;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.Calendar;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.Timer;

/**
 *
 * @author trinch
 */
public class BrownianTree extends javax.swing.JPanel {

    int N;                                // N-by-N grid
    int x, y;                             // current (x, y) location
    double radius;                        // radius
    double dist;                          // distance squared of (x, y) from seed
    boolean[][] dla;                      // is cell (x, y) occupied
    int particles = 0;   
    long seed = 0L;
    int stage_count;                      // how far to draw to in animations
    BufferedImage pic;
    Random random;
    boolean animate;
    Color [] colors;
    Timer timer;
    /**
     * Creates new form BrownianTree
     */
    public BrownianTree() {
        initComponents();
        seed = Calendar.getInstance().getTimeInMillis();
        this.setBackground(Color.BLACK);
        this.random = new Random(this.seed);
        this.N = this.getHeight();
        this.stage_count = N/2 - 2;
        animate = false;
        // create rainbow of colors
        colors = new Color[256];
        for (int i = 0; i < 256; i++)
        colors[i] = Color.getHSBColor(1.0f * i / 255, .8f, .8f);
    }
    
    
    @Override
    public void paintComponent(Graphics g)
    {
        System.out.println("Painting.");
        super.paintComponent(g); // Do the original draw
        
        if (this.pic != null && !this.animate) {
            g.drawImage(pic, (getWidth()-getHeight())/2, 0, getHeight(), getHeight(), null);
            System.out.println("Returning from paint component.");
            return;
        }
        
        if(this.N != this.getHeight()) {
            this.N = this.getHeight();
            this.stage_count = N/2 - 2;
        }
        
        if (!this.animate) {
            pic = new BufferedImage(N, N, BufferedImage.TYPE_INT_RGB );
            System.out.println("Creating a new image.");
            dla = new boolean[N][N];
            radius = 10;
            dla[N/2][N/2] = true;
            pic.setRGB(N/2, N/2, Color.BLUE.getRGB());
        } 

             
        
        int animatePixelCounter = 0;
        while (radius < this.stage_count) {
            // choose launching site on circle of given radius from seed
            double angle = 2.0 * Math.PI * random.nextDouble();
            x = (int) (N/2.0 + radius * Math.cos(angle));
            y = (int) (N/2.0 + radius * Math.sin(angle));

            // particle takes a 2d random walk
            while (true) {
                double r = random.nextDouble();
                if      (r < 0.25) x--;
                else if (r < 0.50) x++;
                else if (r < 0.75) y++;
                else               y--;
 
                // check if entered kill zone
                dist = Math.sqrt((N/2-x)*(N/2-x) + (N/2-y)*(N/2-y));
                if (dist >= Math.min((N-2)/2.0, radius + 25)) break;

                // check if neighboring site is occupied
                if (dla[x-1][y]   || dla[x+1][y]   || dla[x][y-1]   || dla[x][y+1]   ||
                    dla[x-1][y-1] || dla[x+1][y+1] || dla[x-1][y+1] || dla[x+1][y-1] ) {
                    dla[x][y] = true;
                    if (dist > radius) radius = dist;
                    break;
                }
            }

            if (dla[x][y]) {
                particles++;
                pic.setRGB(x, y, colors[(particles / 76) % 256].getRGB());
                System.out.println("Setting rgb");
            }
            
            animatePixelCounter++;
            if (animate && animatePixelCounter > 60) {
                break;
            }
            
        }
        
        if (radius > this.stage_count && animate) {
            timer.stop();

            animate = false;
        }
            
        g.drawImage(pic, (getWidth()-getHeight())/2, 0, getHeight(), getHeight(), null);
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        saveImageButton = new javax.swing.JButton();
        redrawImageButton = new javax.swing.JButton();
        animateButton = new javax.swing.JButton();

        saveImageButton.setText("Save image");
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });

        redrawImageButton.setText("Redraw image");
        redrawImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redrawImageButtonActionPerformed(evt);
            }
        });

        animateButton.setText("Animate");
        animateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(273, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(redrawImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(animateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveImageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redrawImageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(animateButton)
                .addContainerGap(198, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed

        // Show the file chooser and get the value returned.
        int returnVal = jFileChooser1.showOpenDialog(this);
        String image_name = new String();
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            image_name = jFileChooser1.getSelectedFile().getPath();
        } 
        
        try {
            File outputfile = new File(image_name + ".png");
            ImageIO.write(pic, "png", outputfile);
        } catch (IOException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void redrawImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redrawImageButtonActionPerformed
        this.pic = null;
        this.repaint();
    }//GEN-LAST:event_redrawImageButtonActionPerformed

    private void animateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animateButtonActionPerformed
        pic = new BufferedImage(N, N, BufferedImage.TYPE_INT_RGB );
        dla = new boolean[N][N];
        radius = 10;
        dla[N/2][N/2] = true;
        pic.setRGB(N/2, N/2, Color.BLUE.getRGB());
        animate = true;
        timer = new Timer(5,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                BrownianTree.this.repaint();
            }
        });
        timer.start();
    }//GEN-LAST:event_animateButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton animateButton;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JButton redrawImageButton;
    private javax.swing.JButton saveImageButton;
    // End of variables declaration//GEN-END:variables
}
