/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mandelbrotset;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;

/**
 *
 * @author trinch
 */
public class SierpinskiGasket extends javax.swing.JPanel {

    BufferedImage pic;
    int heightOrig;
    int widthOrig;
    /**
     * Creates new form SierpinskiGasket
     */
    public SierpinskiGasket() {
        heightOrig = this.getHeight();
        widthOrig = this.getWidth();
        initComponents();
    }

   
    @Override
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g); // Do the original draw

        if (this.pic != null && widthOrig == getWidth() && heightOrig == getHeight()) {
            g.drawImage(pic, 0, 0, this.getWidth(), this.getHeight(), null);
            return;
        }
        
        int height = this.getHeight()*2 - this.getHeight()/4;
        // aspect ratio
        int width = height;
        int blankSpace = 0;
        
        heightOrig = this.getHeight();
        widthOrig = this.getWidth();
        pic = new BufferedImage(widthOrig, heightOrig, BufferedImage.TYPE_3BYTE_BGR);
        Graphics2D g2d = pic.createGraphics();
        //g2d.setBackground(Color.GRAY);
        //g2d.fillRect(0, 0, widthOrig, heightOrig);
        
        
        /* 
            Pseudo code:
            (x, y)= a random point in the bi-unit square
            iterate { 
                i = a random integer from 0 to n âˆ’ 1 inclusive
                (x, y) = Fi(x, y)
                plot(x, y) except during the first 20 iterations
            }
        */
        
        int i=0, numIterations=500000;
        // map x and y to [-1, 1]
        double x = -1 + (Math.random() * 2);
        double y = -1 + (Math.random() * 2);

        while (i < numIterations) {
            // choosing which function to use
            int fun = (int)(Math.random() * (3));
            // recalculate x and y coordinates
            x = x(x, fun);
            y = y(y, fun);

            if (i > 19)
                plot (x, y, height, width, blankSpace, g2d, fun);
            
            i++;

        }
        
        g.drawImage(pic, 0, 0, widthOrig, heightOrig, null);
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        saveImageButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        saveImageButton1.setText("Save image");
        saveImageButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("SIERPINSKI GASKET");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(222, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveImageButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                .addComponent(saveImageButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveImageButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButton1ActionPerformed

        // Show the file chooser and get the value returned.
        int returnVal = jFileChooser1.showOpenDialog(this);
        String image_name = new String();
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            image_name = jFileChooser1.getSelectedFile().getPath();
        }

        try {
            File outputfile = new File(image_name + ".png");
            ImageIO.write(pic, "png", outputfile);
        } catch (IOException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_saveImageButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton saveImageButton1;
    // End of variables declaration//GEN-END:variables

    private double x(double x, int fun) {
        switch(fun) {
            case 0: 
                return x/2.0;
            case 1:
                return (x+1)/2.0;
            case 2:
                return x/2.0;
        }
        
        return -2;
    }

    private double y(double y, int fun) {
        switch(fun) {
            case 0:
                return y/2.0;
            case 1:
                return y/2.0;
            case 2:
                return (y+1)/2.0;
        }
        
        return -2;
    }

    private void plot(double x, double y, int height, int width, int blankSpace, Graphics g, int fun) {
        switch(fun) {
            case 0:
                g.setColor(new Color(102,153,102));
                break;
            case 1:
                g.setColor(new Color(51,102,153));
                break;
            case 2:
                g.setColor(new Color(153,0,51));
                break;
        }
        //System.out.println(x);
        //System.out.println(y);
        // get a number from 0 to 2
        x = x+1;
        y = y+1;
        // multiply to get pixels, add or subtract to center it
        x = x*(height/2) - height/8;
        y = width - 1 - y*(width/2) + height/20;

        g.drawOval((int)(x+blankSpace), (int)(y+blankSpace), 1, 1);
    }
}
